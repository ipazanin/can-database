@using CanDatabase.Shared.PaginationModels
@using CanDatabase.Client.Models

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in Links)
        {
            <li @onclick=@(() => OnSelectedPage(link)) style="cursor: pointer;" class=@(GetClass(link))>
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter]
    public PagingMetadata? PagingMetadata { get; set; }

    [Parameter]
    public int Spread { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<PagingLink> Links { get; set; } = new List<PagingLink>();

    protected override void OnParametersSet()
    {
        CreatePaginationLinks();
    }

    private void CreatePaginationLinks()
    {
        Links = new List<PagingLink>();
        Links.Add(new PagingLink(
            page: PagingMetadata!.CurrentPage - 1,
            enabled: PagingMetadata.HasPrevious(),
            text: "Previous",
            active: false
            ));

        for (int i = 1; i <= PagingMetadata.TotalPages(); i++)
        {
            if (i >= PagingMetadata.CurrentPage - Spread && i <= PagingMetadata.CurrentPage + Spread)
            {
                Links.Add(new PagingLink(
                    page: i,
                    enabled: true,
                    text: i.ToString(),
                    active: PagingMetadata.CurrentPage == i
                    ));
            }
        }
        Links.Add(new PagingLink(
            page: PagingMetadata.CurrentPage + 1,
            enabled: PagingMetadata.HasNext(),
            text: "Next",
            active: false
            ));
    }
    private async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == PagingMetadata!.CurrentPage || !link.Enabled)
        {
            return;
        }

        PagingMetadata = new PagingMetadata(
            currentPage: link.Page,
            pageSize: PagingMetadata.PageSize,
            totalCount: PagingMetadata.TotalCount
            );

        await SelectedPage.InvokeAsync(link.Page);
    }

    private string GetClass(PagingLink link)
    {
        return "page-item " + (link.Enabled ? " " : "disabled ") + (link.Active ? "active" : "");
    }

}
