{
  // https://code.visualstudio.com/docs/editor/userdefinedsnippets
  // https://stackoverflow.com/questions/33485643/vscode-snippet-for-creating-new-c-sharp-class-with-namespace-declaration
  "Model": {
    "scope": "csharp",
    "prefix": "csModel",
    "body": [
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE} Model",
      "    /// </summary>",
      "    public class ${TM_FILENAME_BASE}",
      "    {",
      "        #region Constants",
      "        #endregion Constants",
      "",
      "        #region Properties",
      "        $0",
      "        #endregion Properties",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}()",
      "        {",
      "        }",
      "        #endregion Constructors",
      "",
      "        #region Methods",
      "        #endregion Methods",
      "    }",
      "}"
    ],
    "description": "Create new Model class"
  },
  "Service": {
    "scope": "csharp",
    "prefix": "csService",
    "body": [
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE}",
      "    /// </summary>",
      "    public class ${TM_FILENAME_BASE}",
      "    {",
      "        #region Constants",
      "        #endregion Constants",
      "",
      "        #region Fields",
      "        #endregion Fields",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}(",
      "            $0",
      "        )",
      "        {",
      "        }",
      "        #endregion Constructors",
      "",
      "        #region Methods",
      "        #endregion Methods",
      "    }",
      "}"
    ],
    "description": "Create new Service"
  },
  "Controller": {
    "scope": "csharp",
    "prefix": "csController",
    "body": [
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE}",
      "    /// </summary>",
      "    public class ${TM_FILENAME_BASE} : ControllerBase",
      "    {",
      "        #region Fields",
      "        #endregion Fields",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}(",
      "            $0",
      "        )",
      "        {",
      "        }",
      "        #endregion Constructors",
      "",
      "        #region Methods",
      "        #endregion Methods",
      "    }",
      "}"
    ],
    "description": "Create new Controller"
  },
  "Request": {
    "scope": "csharp",
    "prefix": "csRequest",
    "body": [
      "using MediatR;",
      "",
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE}",
      "    /// </summary>",
      "    public record ${TM_FILENAME_BASE} : IRequest",
      "    {",
      "        #region Properties",
      "        $0",
      "        #endregion Properties",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}()",
      "        {",
      "        }",
      "        #endregion Constructors",
      "    }",
      "}"
    ],
    "description": "Create new Mediator Request"
  },
  "Response": {
    "scope": "csharp",
    "prefix": "csResponse",
    "body": [
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE}",
      "    /// </summary>",
      "    public record ${TM_FILENAME_BASE}",
      "    {",
      "        #region Properties",
      "        $0",
      "        #endregion Properties",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}()",
      "        {",
      "        }",
      "        #endregion Constructors",
      "    }",
      "}"
    ],
    "description": "Create new Mediator Response"
  },
  "Handler": {
    "scope": "csharp",
    "prefix": "csHandler",
    "body": [
      "using System.Threading;",
      "using System.Threading.Tasks;",
      "using MediatR;",
      "",
      "namespace ${TM_DIRECTORY/^\\/private\\/var\\/projects\\/rimac\\/can-database\\/source\\/CanDatabase(\\/([^\\/]+))(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?(\\/([^\\/]+))?/$2${3:+.}$4${5:+.}$6${7:+.}$8${9:+.}$10${11:+.}$12${13:+.}$14${15:+.}$16${17:+.}$18${19:+.}$20/gi}",
      "{",
      "    /// <summary>",
      "    /// ${TM_FILENAME_BASE}",
      "    /// </summary>",
      "    public class ${TM_FILENAME_BASE} : IRequestHandler<$0>",
      "    {",
      "        #region Fields",
      "        #endregion Fields",
      "",
      "        #region Constructors",
      "        /// <summary>",
      "        /// ${TM_FILENAME_BASE} Constructor",
      "        /// </summary>",
      "        public ${TM_FILENAME_BASE}()",
      "        {",
      "        }",
      "        #endregion Constructors",
      "",
      "        #region Methods",
      "        public async Task<> Handle(",
      "            $0 request,",
      "            CancellationToken cancellationToken",
      "        )",
      "        {",
      "        }",
      "        #endregion Methods",
      "    }",
      "}"
    ],
    "description": "Create new Mediator Request"
  }
}
